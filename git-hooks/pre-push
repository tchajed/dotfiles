#!/usr/bin/env python3

import subprocess
import sys

def run_git(*args):
    output = subprocess.check_output(['git'] + list(args))
    return output.decode("utf-8").strip()


def is_valid_object(ref):
    result = subprocess.run(["git", "cat-file", "-e", ref],
            stdout=subprocess.DEVNULL)
    if result.returncode == 0:
        return True
    return False


def commit_msgs(start_ref, end_ref):
    if not is_valid_object(start_ref):
        # remote commit is invalid, indicating remote has some new commits and
        # the push will likely fail due to a non-fast-forward push anyway.
        sys.exit(0)
    # pushing to empty remote
    if start_ref == "0" * 40:
        commits = end_ref
    else:
        commits = start_ref + ".." + end_ref
    messages = run_git("log", "--format=%h|%s", commits)
    for line in messages.split("\n"):
        line = line.strip()
        if line == "":
            continue
        sha, summary = line.split("|", 1)
        yield (sha, summary)

def temp_msg(msg):
    return msg.startswith("oops ") or msg.startswith("checkpoint")

def main():
    temp_messages = []
    for line in sys.stdin.readlines():
        line = line.strip()
        local_branch, end_ref, remote_branch, start_ref = line.split(" ")
        for (sha, msg) in commit_msgs(start_ref, end_ref):
            if temp_msg(msg):
                temp_messages.append( (sha, msg) )
    if temp_messages:
        print("the following fixes should be rebased:")
        for ref, msg in temp_messages:
            print(ref, msg)
        sys.exit(1)

main()
